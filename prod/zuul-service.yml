zuul:
  retryable: true #开启重试功能
  routes:
    baidu:
      path: /bb/**       #通过路径/bb重定向到baidu
      url: http://www.baidu.com
    #方式1.zuul和微服务都已经注册到eureka上，通过serviceId可实现路由网关。http://zuul_host:zuul_port/b-config/**
    #b-config: #路径
    #  serviceId: service-b-config #serviceId

    #方式2。serviceId: /path   。http://zuul_host:zuul_port/bb-config/**
    #service-b-config: /bb-config/**

    #方式3 http://zuul_host:zuul_port/b3-config/**
    bbb-config:
      path: /b3-config/**
      serviceId: service-b-config
      stripPrefix: true
    b-ribbon:
      path: /b-r/**
      serviceId: service-b-ribbon
    b-feign:
      path: /b-f/**
      serviceId: service-b-feign

# 开启重试在某些情况下是有问题的，比如当压力过大，一个实例停止响应时，路由将流量转到另一个实例，很有可能导致最终所有的实例全被压垮。
# 断路器的其中一个作用就是防止故障或者压力扩散。用了retry，断路器就只有在该服务的所有实例都无法运作的情况下才能起作用。
# 这种时候，断路器的形式更像是提供一种友好的错误信息，或者假装服务正常运行的假象给使用者。
# 不用retry，仅使用负载均衡和熔断，就必须考虑到是否能够接受单个服务实例关闭和eureka刷新服务列表之间带来的短时间的熔断。
# 如果可以接受，就无需使用retry。

# 以下为官方文档提供的可配置参数
#  # Max number of retries on the same server (excluding the first try)
#  sample-client.ribbon.MaxAutoRetries=1
#  # Max number of next servers to retry (excluding the first server)
#  sample-client.ribbon.MaxAutoRetriesNextServer=1
#  # Whether all operations can be retried for this client
#  sample-client.ribbon.OkToRetryOnAllOperations=true
#  # Interval to refresh the server list from the source
#  sample-client.ribbon.ServerListRefreshInterval=2000
#  # Connect timeout used by Apache HttpClient
#  sample-client.ribbon.ConnectTimeout=3000
#  # Read timeout used by Apache HttpClient
#  sample-client.ribbon.ReadTimeout=3000
#  # Initial list of servers, can be changed via Archaius dynamic property at runtime
#  sample-client.ribbon.listOfServers=www.microsoft.com:80,www.yahoo.com:80,www.google.com:80

# The format of the entry is:
# <clientName>.<nameSpace>.<propertyName>=<value>
service-b-config :
  ribbon:
    MaxAutoRetries: 5 # 对当前服务的重试次数
    MaxAutoRetriesNextServer: 1 # 切换相同Server的次数,表示每个实例连接一次，每个服务尝试连接5次
    ConnectTimeout: 10000  # Connect timeout

